# File: .gitlab-ci.yml
# License: Part of the PIRA proect. Licensed under BSD 3 clause license. See LICENSE.txt file at https://github.com/jplehr/pira/LICENSE.txt
# Description: File to configure our Gitlab CI

# The order of unit-test, dependence-build-test, and deps-unit-test is to not do time-heavy dependency building
# should the PIRA unit tests fail anyway
stages:
  - download-test
  - unit-test
  - dependence-build-test
  - full-dependence-test
  - deps-unit-test
  - prepare-integration-test
  - integration-test

# Setting up the environment on the Lichtenberg system
.lb-setup: &lb-setup
  - export LMOD_IGNORE_CACHE=1
  - module load gcc/10.2
  - module load git python/3 cmake llvm/10 openmpi
  - module load libcube/4.5
  - module load extrap/3.0

.lb-tear-down: &lb-tear-down
  - rm -rf $(dirname $(echo $SSH_AUTH_SOCK))

# Only test that the submodules configured in here are accessible, so we do not block the Pipeline unneccessary long
# GIT_STRATEGY: clone is used to always start with a clean checkout of the repository.
# GIT_SUBMODULE_STRATEGY: none (default), i.e., git submodules need to be handled manually
download:
  stage: download-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - *lb-tear-down

# Runs the unit tests 
# Also uses the GIT_STRATEGY fetch.
# XXX should this be split into multiple, i.e., 1 job per unit test suite?
pira:
  stage: unit-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  coverage: /^TOTAL.+?(\d+\%)$/
  script:
    - export PATH=`pwd`/extern/install/scorep/bin:`pwd`/extern/install/extrap/bin:$PATH
    - ./run_tests.sh
    - *lb-tear-down
  artifacts:
    when: always
    reports:
      junit:
        - test/unit/report-*.xml

# Run linting as part of unit-tests (early)
python-lint:
  stage: unit-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - ./run-python-lint.sh
    - *lb-tear-down

      # Run linting as part of unit-tests (early)
shell-lint:
  stage: unit-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - module load shellcheck
    - ./run-shell-lint.sh
    - *lb-tear-down

build-reduced-deps:
  stage: dependence-build-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd resources
    - ./remove_builds.sh
    - echo $CUBELIB_ROOT
    - echo $EXTRAP_ROOT
    - ./build_submodules.sh -p $(cat /proc/cpuinfo | grep processor | wc -l) -e $EXTRAP_ROOT -c $LIBCUBE_ROOT
    - *lb-tear-down

# Runs the llvm-instrumentation unit tests
llvm-instrumentation:
  stage: deps-unit-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd extern/src/llvm-instrumentation/test
    - lit -v .
    - *lb-tear-down

# Runs the larger integration tests
# XXX we might be able to re-use the still-available software builds from the build-dependencies stage?
# This would *significantly* reduce the time this stage requires.
run-prepare-integration:
  stage: prepare-integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd test/integration
    - . prepare_environment.sh
    - *lb-tear-down

# Actually run the integration tests
run-gameoflife-test:
  stage: integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife (PIRA II) integration test'
    - cd test/integration/GameOfLife
    - ./run.sh
    - *lb-tear-down

run-gameoflife-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife Slurm (PIRA II) integration test'
    - cd test/integration/GameOfLife_Slurm
    - ./run.sh
    - *lb-tear-down

run-amg2013-test:
  stage: integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running AMG integration test'
    - cd test/integration/AMG2013
    - ./run.sh
    - *lb-tear-down

run-amg2013-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running AMG Slurm integration test'
    - cd test/integration/AMG2013_Slurm
    - ./run.sh
    - *lb-tear-down

run-gameoflife-v1-test:
  stage: integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife (PIRA I) integration test'
    - cd test/integration/GameOfLifePiraVersion1
    - ./run.sh
    - *lb-tear-down

run-gameoflife-v1-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife Slurm (PIRA I) integration test'
    - cd test/integration/GameOfLifePiraVersion1_Slurm
    - ./run.sh
    - *lb-tear-down

run-gameoflife-hybrid-test:
  stage: integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife-hybrid-filtering integration test'
    - cd test/integration/GameOfLife_hybrid_filter
    - ./run.sh
    - *lb-tear-down

run-gameoflife-hybrid-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife-hybrid-filtering Slurm integration test'
    - cd test/integration/GameOfLife_hybrid_filter_Slurm
    - ./run.sh
    - *lb-tear-down

# Disabled as it requires MetaCG Version 2
run-gameoflife-heuristic-test:
  stage: integration-test
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife-heuristic integration test'
    - cd test/integration/GameOfLife_heuristic
    - ./run.sh
    - *lb-tear-down

## XXX: For now we leave this out as a Slurm test, as it would not add
#       any insight in whether the Slurm implementation works.
#       This is meant to test if we have MetaCG file format 2 ready.
# run-gameoflife-heuristic-test-slurm:
#  stage: integration-test
#  tags:
#    - pira-robo
#  before_script: *lb-setup
#  variables:
#    GIT_STRATEGY: none
#    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
#  script:
#    - echo 'Running GameOfLife-heuristic Slurm integration test'
#    - cd test/integration/GameOfLife_heuristic_Slurm
#    - ./run.sh
#    - *lb-tear-down

run-load-imbalance-detection-test:
  stage: integration-test
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running Load imbalance detection integration test'
    - cd test/integration/LoadImbalance
    - ./run.sh
    - *lb-tear-down

run-load-imbalance-detection-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
    - branches
    - tags
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running Load imbalance detection Slurm integration test'
    - cd test/integration/LoadImbalance_Slurm
    - ./run.sh
    - *lb-tear-down

run-lulesh-test:
  stage: integration-test
  only:
    - merge_requests
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running LULESH test (using PIRA LIDe)'
    - cd test/integration/LULESH
    - ./run.sh
    - *lb-tear-down

run-lulesh-test-slurm:
  stage: integration-test
  allow_failure: true
  only:
    - merge_requests
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running LULESH test on Slurm (using PIRA LIDe)'
    - cd test/integration/LULESH_Slurm
    - ./run.sh
    - *lb-tear-down

# Disabled because it takes too long
# run-kripke-test:
#   stage: integration-test
#   only:
#     - merge_requests
#   tags:
#     - pira-robo
#   before_script: *lb-setup
#   variables:
#     GIT_STRATEGY: none
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
#   script:
#     - echo 'Running Kripke test (using PIRA I)'
#     - cd test/integration/Kripke
#     - ./run.sh
#     - *lb-tear-down

# run-kripke-test-slurm:
#   stage: integration-test
#   only:
#     - merge_requests
#   tags:
#     - pira-robo
#   before_script: *lb-setup
#   variables:
#     GIT_STRATEGY: none
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
#   script:
#     - echo 'Running Kripke test on Slurm (using PIRA I)'
#     - cd test/integration/Kripke_Slurm
#     - ./run.sh
#     - *lb-tear-down

# Do a full build of all dependencies via the convenience scripts for merge requests
build-all-deps:
  stage: full-dependence-test
  only:
    - merge_requests
  tags:
    - pira-robo
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - module unload libcube extrap
    - cd resources
    - ./remove_builds.sh
    - echo $CUBELIB_ROOT
    - echo $EXTRAP_ROOT
    - cat ./setup_paths.sh
    - ./build_submodules.sh -p $(cat /proc/cpuinfo | grep processor | wc -l)
    - *lb-tear-down

