# File: .gitlab-ci.yml
# License: Part of the PIRA proect. Licensed under BSD 3 clause license. See LICENSE.txt file at https://github.com/jplehr/pira/LICENSE.txt
# Description: File to configure our Gitlab CI

# The order of unit-test, dependence-build-test, and deps-unit-test is to not do time-heavy dependency building
# should the PIRA unit tests fail anyway
stages:
  - download-test
  - unit-test
  - dependence-build-test
  - deps-unit-test
  - prepare-integration-test
  - integration-test
  - full-dependence-test

# Setting up the environment on the Lichtenberg system
.lb-setup: &lb-setup
  - export LMOD_IGNORE_CACHE=1
  - eval $(ssh-agent -s)
  - ssh-add ~/.ssh/gitlab_ed25519
  - module load gcc/8.4
  - module load git python/3.7.4 cmake llvm/10 openmpi
  - module load libcube/4.5
  - module load extrap/3.0

.lb-tear-down: &lb-tear-down
  - rm -rf $(dirname $(echo $SSH_AUTH_SOCK))
  - ssh-agent -k

# Pull-in the git submodules that are used during development
.get-submodules: &get-submodules
  - git submodule init;
  - git submodule update --force extern/src/scorep-mod;
  - git submodule update extern/src/metacg;

# Only test that the submodules configured in here are accessible, so we do not block the Pipeline unneccessary long
# GIT_STRATEGY: clone is used to always start with a clean checkout of the repository.
# GIT_SUBMODULE_STRATEGY: none (default), i.e., git submodules need to be handled manually
download:
  stage: download-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - *get-submodules
    - *lb-tear-down

# Runs the unit tests 
# Also uses the GIT_STRATEGY fetch.
# XXX should this be split into multiple, i.e., 1 job per unit test suite?
pira:
  stage: unit-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  coverage: /^TOTAL.+?(\d+\%)$/
  script:
    - export PATH=`pwd`/extern/install/scorep/bin:`pwd`/extern/install/extrap/bin:$PATH
    - ./run_tests.sh
    - *lb-tear-down
  artifacts:
    when: always
    reports:
      junit:
        - test/unit/report-*.xml

# Run linting as part of unit-tests (early)
python-lint:
  stage: unit-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - ./run-python-lint.sh
    - *lb-tear-down

      # Run linting as part of unit-tests (early)
shell-lint:
  stage: unit-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - module load shellcheck
    - ./run-shell-lint.sh
    - *lb-tear-down

build-reduced-deps:
  stage: dependence-build-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd resources
    - ./remove_builds.sh
    - echo $CUBELIB_ROOT
    - echo $EXTRAP_ROOT
    - ./build_submodules.sh -p $(cat /proc/cpuinfo | grep processor | wc -l) -e $EXTRAP_ROOT -c $LIBCUBE_ROOT
    - *lb-tear-down

# Runs the llvm-instrumentation unit tests
llvm-instrumentation:
  stage: deps-unit-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd extern/src/llvm-instrumentation/test
    - $HOME/all_repos/gh-llvm-llvm-project/llvm/utils/lit/lit.py -v .
    - *lb-tear-down

# Runs the larger integration tests
# XXX we might be able to re-use the still-available software builds from the build-dependencies stage?
# This would *significantly* reduce the time this stage requires.
run-prepare-integration:
  stage: prepare-integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd test/integration
    - . prepare_environment.sh
    - *lb-tear-down

# Actually run the integration tests
run-gameoflife-test:
  stage: integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife (PIRA II) integration test'
    - cd test/integration/GameOfLife
    - ./run.sh
    - *lb-tear-down

run-amg2013-test:
  stage: integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running AMG integration test'
    - cd test/integration/AMG2013
    - ./run.sh
    - *lb-tear-down

run-gameoflife-v1-test:
  stage: integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife (PIRA I) integration test'
    - cd test/integration/GameOfLifePiraVersion1
    - ./run.sh
    - *lb-tear-down

run-gameoflife-hybrid-test:
  stage: integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running GameOfLife-hybrid-filtering integration test'
    - cd test/integration/GameOfLife_hybrid_filter
    - ./run.sh
    - *lb-tear-down

# Disabled as it requires MetaCG Version 2
# run-gameoflife-heuristic-test:
#  stage: integration-test
#  tags:
#    - hlb0001
#  before_script: *lb-setup
#  variables:
#    GIT_STRATEGY: none
#    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
#  script:
#    - echo 'Running GameOfLife-heuristic integration test'
#    - cd test/integration/GameOfLife_heuristic
#    - ./run.sh
#    - *lb-tear-down

run-load-imbalance-detection-test:
  stage: integration-test
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Running Load imbalance detection integration test'
    - cd test/integration/LoadImbalance
    - ./run.sh
    - *lb-tear-down

# Do a full build of all dependencies via the convenience scripts for merge requests
build-all-deps:
  stage: full-dependence-test
  only:
    - merge_requests
  tags:
    - hlb0001
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: fetch
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - module unload libcube extrap
    - cd resources
    - ./remove_builds.sh
    - echo $CUBELIB_ROOT
    - echo $EXTRAP_ROOT
    - cat ./setup_paths.sh
    - ./build_submodules.sh -p $(cat /proc/cpuinfo | grep processor | wc -l)
    - cd ../test/integration
    - . prepare_environment.sh
    - cd AMG2013
    - ./run.sh
    - cd ../GameOfLife
    - ./run.sh
    - cd ../GameOfLife_hybrid_filter
    - ./run.sh
    - cd ../GameOfLifePiraVersion1
    - ./run.sh
    - cd ../LoadImbalance
    - ./run.sh
    - *lb-tear-down

